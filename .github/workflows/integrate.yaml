# reusable workflow triggered by other actions
name: CI

on:
  workflow_call:
    secrets:
      charmcraft-credentials:
        required: true

jobs:

  lib-check:
    name: Check libraries
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check libs
        uses: canonical/charming-actions/check-libraries@2.1.1
        with:
          credentials: "${{ secrets.charmcraft-credentials }}"
          github-token: "${{ secrets.GITHUB_TOKEN }}"

  lint:
    name: Lint Check
    runs-on: ubuntu-20.04

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: sudo apt install tox

    - name: Lint code
      run: tox -e lint

  unit:
    name: Unit Test
    runs-on: ubuntu-20.04

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: sudo apt install tox

    - name: Run unit tests
      run: tox -e unit

  deploy:
    name: Test
    runs-on: ubuntu-20.04

    steps:
    - name: Check out repo
      uses: actions/checkout@v2

    - uses: balchua/microk8s-actions@v0.2.2
      with:
        addons: '["dns", "storage", "rbac"]'
        channel: 1.24/stable

      # Avoid race condition with storage taking a long time to initialize
    - name: Wait for storage
      run: |
        sg microk8s -c 'microk8s kubectl rollout status deployment/hostpath-provisioner -n kube-system'

    - name: Install dependencies
      run: |
        set -eux
        sudo snap install charmcraft --classic --channel=latest/candidate
        sudo snap install juju --classic
        sudo snap install juju-wait --classic
        sudo snap install yq

    - name: Bootstrap Juju
      run: |
        set -eux
        sg microk8s -c 'juju bootstrap microk8s uk8s'
        juju add-model ci-test

    - name: Deploy charm
      run: |
        set -eux
        charmcraft pack --destructive-mode
        juju deploy ./*.charm \
          --resource oci-image=$(yq eval '.resources.oci-image.upstream-source' metadata.yaml)
        juju deploy cs:mlmd
        juju relate envoy mlmd
        juju wait -wvt 300

    - name: Get all
      run: kubectl get all -A
      if: failure()

    - name: Get juju status
      run: juju status
      if: failure()

    - name: Get envoy workload logs
      run: kubectl logs --tail 100 -nci-test -ljuju-app=envoy
      if: failure()

    - name: Get envoy operator logs
      run: kubectl logs --tail 100 -nci-test -ljuju-operator=envoy
      if: failure()

    - name: Get mlmd workload logs
      run: kubectl logs --tail 100 -nci-test -ljuju-app=mlmd
      if: failure()

    - name: Get mlmd operator logs
      run: kubectl logs --tail 100 -nci-test -ljuju-operator=mlmd
      if: failure()
